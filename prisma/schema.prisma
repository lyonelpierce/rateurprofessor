generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id String @id @default(cuid())
  userId String @unique
  professorReviews   ProfessorReview[]
  universityReviews  UniversityReview[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model University {
  id          String     @id @default(cuid())
  name        String
  category    String
  location    String
  regimen     String
  tipo        String
  professors  Professor[]
  courses     Course[] 
  reviews     UniversityReview[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Professor {
  id            String       @id @default(cuid())
  name          String
  userId        String       @unique
  university    University   @relation(fields: [universityId], references: [id])
  universityId  String
  courses       Course[]   
  reviews       ProfessorReview[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([universityId])
}

model Course {
  id            String       @id @default(cuid())
  name          String
  professors    Professor[]  
  universities  University[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model ProfessorReview {
  id            String       @id @default(cuid())
  content       String
  rating        Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  professor     Professor    @relation(fields: [professorId], references: [id])
  professorId   String

  @@index([userId])
  @@index([professorId])
}

model UniversityReview {
  id            String       @id @default(cuid())
  safetyRating       Int
  locationRating     Int
  happinessRating    Int
  opportunitiesRating Int
  reputationRating   Int
  clubsRating        Int
  facilitiesRating   Int
  internetRating     Int
  foodRating         Int
  socialRating       Int
  overallRating      Float
  content       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  university    University   @relation(fields: [universityId], references: [id])
  universityId  String

  @@index([userId])
  @@index([universityId])
}